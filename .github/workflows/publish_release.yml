name: Publish Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version to release"
        required: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install cross for aarch64
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: cargo install cross

    - name: Install target
      run: rustup target add ${{ matrix.target }}

    - name: Build for ${{ matrix.target }}
      run: |
          cross build --release --target ${{ matrix.target }};


    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.target }}
        path: ./target/${{ matrix.target }}/release
        
  create_release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.release_version != ''
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_version }}
        release_name: "Release ${{ github.event.inputs.release_version }}"
        draft: false
        prerelease: false

    - name: Save upload_url to a file
      run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt

    - name: Upload upload_url artifact
      uses: actions/upload-artifact@v3
      with:
        name: upload_url
        path: upload_url.txt

  upload_binaries:
    runs-on: ${{ matrix.os }}
    needs: [build, create_release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ matrix.target }}

    - name: Download upload_url artifact
      uses: actions/download-artifact@v3
      with:
        name: upload_url

    - name: Read upload_url from file
      id: read_upload_url
      run: echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV

    - name: Upload Executable Binaries
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./cli
        asset_name: passport-for-ai-${{ matrix.target }}
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
