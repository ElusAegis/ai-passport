use crate::config::VerifyConfig;
use anyhow::{Context, Result};
use dialoguer::console::{style, Term};
use std::time::Duration;
use tlsn_core::presentation::{Presentation, PresentationOutput};
use tlsn_core::signing::VerifyingKey;
use tlsn_core::CryptoProvider;

/// A simple verifier which reads a proof generated by `simple_prover.rs` from "proof.json", verifies
/// it and prints the verified data to the console.
pub(crate) fn run_verify(app_conf: &VerifyConfig) -> Result<()> {
    // Deserialize the attestation presentation
    let ser_attestation =
        std::fs::read_to_string(app_conf.proof_path.as_path()).context(format!(
            "Failed to read proof at {}",
            app_conf.proof_path.to_str().unwrap_or("???"),
        ))?;
    let presentation: Presentation = serde_json::from_str(ser_attestation.as_str())
        .context("Failed to deserialize proof generated by a valid proof")?;

    let VerifyingKey { data: key_data, .. } = presentation.verifying_key();

    let term = Term::stderr();
    term.write_line(&format!(
        "{} {}\n\n    {}\n",
        style("ðŸ”‘ Verifying presentation with key:").bold(),
        style(hex::encode(key_data)).cyan(),
        style("ðŸš¨  Ask yourself: do you trust this key?  ðŸš¨")
            .red()
            .bold(),
    ))?;

    let provider = CryptoProvider::default();

    // Verify the presentation.
    let PresentationOutput {
        server_name,
        connection_info,
        transcript,
        ..
    } = presentation
        .verify(&provider)
        .context("Failed to verify the presentation")?;

    // The time at which the connection was started.
    let time = chrono::DateTime::UNIX_EPOCH + Duration::from_secs(connection_info.time);
    let server_name = server_name.unwrap();
    let mut partial_transcript = transcript.unwrap();
    // Set the unauthenticated bytes so they are distinguishable.
    partial_transcript.set_unauthed(b'X');

    let sent = String::from_utf8_lossy(partial_transcript.sent_unsafe());
    let recv = String::from_utf8_lossy(partial_transcript.received_unsafe());

    term.write_line(&format!("\n{}", style("-".repeat(70)).dim()))?;

    term.write_line(&format!(
        "{} {} {} {} {}",
        style("âœ”").green(),
        style("Successfully verified bytes from a session with").bold(),
        style(server_name).blue(),
        style("at").bold(),
        style(time).cyan()
    ))?;

    term.write_line(&format!(
        "{}",
        style("Note: undisclosed bytes are shown as 'X'")
            .dim()
            .italic()
    ))?;

    term.write_line("")?;

    term.write_line(&style("ðŸ“¤ Messages sent:").bold().underlined().to_string())?;
    term.write_line(&sent)?;
    term.write_line("")?;

    term.write_line(
        &style("ðŸ“¥ Messages received:")
            .bold()
            .underlined()
            .to_string(),
    )?;
    term.write_line(&recv)?;

    term.write_line(&format!("{}", style("-".repeat(70)).dim()))?;

    Ok(())
}
